#!/bin/bash

# Script idempotent pour d√©marrer un conteneur PostgreSQL
# Usage: ./start-postgres.sh <nom_base_de_donnees> [port] [mot_de_passe]

# Configuration par d√©faut
DEFAULT_PORT=5432
DEFAULT_PASSWORD="postgres"
POSTGRES_USER="postgres"
POSTGRES_VERSION="15"

# Fonction d'aide
show_help() {
    echo "Usage: $0 <nom_base_de_donnees> [port] [mot_de_passe]"
    echo ""
    echo "Param√®tres:"
    echo "  nom_base_de_donnees    Nom de la base de donn√©es (obligatoire)"
    echo "  port                   Port d'√©coute (d√©faut: $DEFAULT_PORT)"
    echo "  mot_de_passe          Mot de passe postgres (d√©faut: $DEFAULT_PASSWORD)"
    echo ""
    echo "Exemples:"
    echo "  $0 myapp"
    echo "  $0 myapp 5433"
    echo "  $0 myapp 5433 monmotdepasse"
    echo ""
    echo "Le conteneur sera nomm√©: postgres-<nom_base_de_donnees>"
    echo "Les donn√©es seront persist√©es dans: ~/.docker/postgres-<nom_base_de_donnees>/data"
}

# V√©rification des param√®tres
if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

# R√©cup√©ration des param√®tres
DB_NAME="$1"
PORT="${2:-$DEFAULT_PORT}"
PASSWORD="${3:-$DEFAULT_PASSWORD}"

# Validation du nom de base de donn√©es
if [[ ! "$DB_NAME" =~ ^[a-zA-Z][a-zA-Z0-9_]*$ ]]; then
    echo "‚ùå Erreur: Le nom de base de donn√©es doit commencer par une lettre et ne contenir que des lettres, chiffres et underscores"
    exit 1
fi

# Validation du port
if ! [[ "$PORT" =~ ^[0-9]+$ ]] || [ "$PORT" -lt 1024 ] || [ "$PORT" -gt 65535 ]; then
    echo "‚ùå Erreur: Le port doit √™tre un nombre entre 1024 et 65535"
    exit 1
fi

# Variables d√©riv√©es
CONTAINER_NAME="postgres-$DB_NAME"
DATA_DIR="$HOME/.docker/postgres-$DB_NAME/data"
INIT_DIR="$HOME/.docker/postgres-$DB_NAME/init"

echo "üêò D√©marrage du conteneur PostgreSQL pour la base '$DB_NAME'..."
echo "üì¶ Conteneur: $CONTAINER_NAME"
echo "üîå Port: $PORT"
echo "üìÇ Donn√©es: $DATA_DIR"

# V√©rifier si Docker est install√© et en cours d'ex√©cution
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©. Veuillez installer Docker Desktop."
    exit 1
fi

if ! docker info &> /dev/null; then
    echo "‚ùå Docker n'est pas en cours d'ex√©cution. Veuillez d√©marrer Docker Desktop."
    exit 1
fi

# V√©rifier si le port est d√©j√† utilis√©
if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
    echo "‚ùå Le port $PORT est d√©j√† utilis√© par un autre processus."
    echo "üí° Processus utilisant le port:"
    lsof -Pi :$PORT -sTCP:LISTEN
    exit 1
fi

# Cr√©er les r√©pertoires de donn√©es s'ils n'existent pas
mkdir -p "$DATA_DIR"
mkdir -p "$INIT_DIR"

# V√©rifier si le conteneur existe d√©j√†
if docker ps -a --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
    echo "üì¶ Le conteneur '$CONTAINER_NAME' existe d√©j√†"
    
    # V√©rifier s'il est en cours d'ex√©cution
    if docker ps --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
        echo "‚úÖ Le conteneur '$CONTAINER_NAME' est d√©j√† en cours d'ex√©cution"
        echo "üîó Connexion: psql -h localhost -p $PORT -U $POSTGRES_USER -d $DB_NAME"
        exit 0
    else
        echo "üîÑ D√©marrage du conteneur existant..."
        if docker start "$CONTAINER_NAME" > /dev/null; then
            echo "‚úÖ Conteneur '$CONTAINER_NAME' d√©marr√© avec succ√®s"
        else
            echo "‚ùå Erreur lors du d√©marrage du conteneur existant"
            exit 1
        fi
    fi
else
    echo "üîÑ Cr√©ation et d√©marrage d'un nouveau conteneur..."
    
    # Cr√©er le script d'initialisation de la base de donn√©es
    cat > "$INIT_DIR/init-db.sql" << EOF
-- Script d'initialisation pour la base de donn√©es $DB_NAME
CREATE DATABASE "$DB_NAME";
GRANT ALL PRIVILEGES ON DATABASE "$DB_NAME" TO $POSTGRES_USER;

-- Se connecter √† la nouvelle base de donn√©es
\c "$DB_NAME";

-- Cr√©er une table d'exemple (optionnel)
-- CREATE TABLE IF NOT EXISTS example_table (
--     id SERIAL PRIMARY KEY,
--     name VARCHAR(100) NOT NULL,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
-- );

-- Afficher un message de confirmation
SELECT 'Base de donn√©es $DB_NAME initialis√©e avec succ√®s!' as message;
EOF

    # D√©marrer le conteneur PostgreSQL
    if docker run -d \
        --name "$CONTAINER_NAME" \
        -e POSTGRES_USER="$POSTGRES_USER" \
        -e POSTGRES_PASSWORD="$PASSWORD" \
        -e POSTGRES_DB="postgres" \
        -p "$PORT:5432" \
        -v "$DATA_DIR:/var/lib/postgresql/data" \
        -v "$INIT_DIR:/docker-entrypoint-initdb.d" \
        --restart unless-stopped \
        postgres:$POSTGRES_VERSION > /dev/null; then
        
        echo "üéâ Conteneur '$CONTAINER_NAME' cr√©√© et d√©marr√© avec succ√®s"
    else
        echo "‚ùå Erreur lors de la cr√©ation du conteneur"
        exit 1
    fi
fi

# Attendre que PostgreSQL soit pr√™t
echo "‚è≥ Attente du d√©marrage de PostgreSQL..."
for i in {1..30}; do
    if docker exec "$CONTAINER_NAME" pg_isready -U "$POSTGRES_USER" > /dev/null 2>&1; then
        echo "‚úÖ PostgreSQL est pr√™t!"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "‚ùå Timeout: PostgreSQL n'a pas d√©marr√© dans les temps"
        exit 1
    fi
    sleep 1
done

# Afficher les informations de connexion
echo ""
echo "üéØ Informations de connexion:"
echo "  Host: localhost"
echo "  Port: $PORT"
echo "  Database: $DB_NAME"
echo "  Username: $POSTGRES_USER"
echo "  Password: $PASSWORD"
echo ""
echo "üîó Commandes utiles:"
echo "  # Se connecter √† la base de donn√©es"
echo "  psql -h localhost -p $PORT -U $POSTGRES_USER -d $DB_NAME"
echo ""
echo "  # Arr√™ter le conteneur"
echo "  docker stop $CONTAINER_NAME"
echo ""
echo "  # Red√©marrer le conteneur"
echo "  docker start $CONTAINER_NAME"
echo ""
echo "  # Supprimer le conteneur (‚ö†Ô∏è les donn√©es seront perdues)"
echo "  docker rm -f $CONTAINER_NAME"
echo ""
echo "  # Voir les logs"
echo "  docker logs $CONTAINER_NAME"
echo ""
echo "üìÇ Donn√©es persist√©es dans: $DATA_DIR"

# V√©rifier si psql est install√© pour la connexion
if ! command -v psql &> /dev/null; then
    echo ""
    echo "üí° Pour installer le client PostgreSQL:"
    echo "  # Sur macOS avec Homebrew:"
    echo "  brew install postgresql"
    echo ""
    echo "  # Ou utilisez Docker pour vous connecter:"
    echo "  docker exec -it $CONTAINER_NAME psql -U $POSTGRES_USER -d $DB_NAME"
fi
